# Lists
my_list = [1, 2, 3, 4, 5]

# Pros:
# - Mutable: Elements can be added, removed, or modified.
# - Ordered: Elements are stored in the order they are added.
# - Allows duplicates: Same element can appear multiple times.
# - Can hold mixed data types.

# Cons:
# - Slower for large datasets compared to sets and dictionaries.
# - Slower for searching and membership testing compared to sets and dictionaries.
# - More memory overhead compared to tuples.

# Tuples
my_tuple = (1, 2, 3, 4, 5)

# Pros:
# - Immutable: Elements cannot be modified after creation.
# - Faster than lists for iteration and indexing.
# - Can be used as keys in dictionaries (due to immutability).

# Cons:
# - Cannot be modified, so adding/removing elements requires creating a new tuple.
# - Limited functionality compared to lists.

# Sets
my_set = {1, 2, 3, 4, 5}

# Pros:
# - Unordered: Elements are not stored in a specific order.
# - Fast membership testing and deduplication of elements.
# - Supports set operations like union, intersection, and difference.

# Cons:
# - Cannot hold duplicate elements.
# - Cannot be indexed like lists or tuples.
# - Slower for iteration compared to lists and tuples.
# - Takes more memory than lists and tuples for small datasets.

# Dictionaries
my_dict = {'a': 1, 'b': 2, 'c': 3}

# Pros:
# - Key-value pairs: Useful for representing mappings.
# - Fast lookup by key: Efficient for retrieving values.
# - Mutable: Values can be added, modified, or removed.

# Cons:
# - Unordered (prior to Python 3.7, dictionaries were unordered).
# - Keys must be unique and hashable.
# - Slightly more memory overhead compared to lists and sets.
# - Slower iteration compared to lists and tuples.

# General Considerations:
# - Choose lists when you need ordered, mutable collections with possible duplicates.
# - Choose tuples for immutability and faster iteration/indexing.
# - Choose sets for unique, unordered elements with fast membership testing.
# - Choose dictionaries for key-value mappings and fast key-based lookups.

# Example of using a dictionary to represent a person's attributes:
person = {'name': 'John', 'age': 30, 'gender': 'male'}
